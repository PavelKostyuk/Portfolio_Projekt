name: CI

on:
    push: 
    pull_request:
        branches: [ main ]

jobs:
    run-test:
        strategy:
            fail-fast: false
            matrix:
               os: [ubuntu-latest]
               python-version: 
                - "3.10"
                - "3.11"

        name: Test
        runs-on: ${{ matrix.os}}
        timeout-minutes: 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Cache dependencies for Ubuntu
              uses: actions/cache@v3
              with:
                path: ~/.cache/pip  # Path to the dependency cache directory
                key: ${{ matrix.os }}-pip-${{ hashFiles('Portfolio/requirements.txt') }}

            - name: Set up Pyhton
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install dependencies
              run: | 
                  python -m pip install --upgrade pip
                  python -m pip install -r Portfolio/requirements.txt

            - name: Run tests
              run: pytest Portfolio/Portfolio/tests/unit
              continue-on-error: false  # This ensures the build fails if the tests fail

    build:
        needs: run-test

        runs-on: ubuntu-latest

        steps:

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Build Docker image
              run: |
                  docker build -t pavelkostyuk/portfolio Portfolio

            - name: Push Docker image to Docker Hub
              run: |
                  echo ${{ secrets.DOCKER_HUB_PAT }} | docker login -u pavelkostyuk --password-stdin
                  docker push pavelkostyuk/portfolio

    deploy:
      needs: build
      runs-on: ubuntu-latest
      
      steps:
        - name: SSH into Droplet and manage Docker and Minikube
          env:
            SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            DROPLET_IP_ADDRESS: ${{ secrets.DROPLET_IP_ADDRESS }}
          run: |
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
            chmod 600 ssh_key.pem
            ssh -o StrictHostKeyChecking=no -i ./ssh_key.pem serveradmin@${DROPLET_IP_ADDRESS} '
            
              # Set up Minikube and Docker
              minikube start --driver=docker
              kubectl config use-context minikube
              eval $(minikube docker-env)
    
              # Delete existing pod if running
              CONTAINER_ID=$(kubectl get pods -o=name | grep pavelkostyuk/portfolio | cut -d'/' -f2)
              if [ -n "$CONTAINER_ID" ]; then
                kubectl delete pod $CONTAINER_ID
              else
                echo "No pod found matching the criteria."
              fi
    
              # Delete image if exists
              OLD_IMAGE_ID=$(docker images -q pavelkostyuk/portfolio:latest)
              CONTAINER_ID=$(docker ps -aqf "ancestor=pavelkostyuk/portfolio")
              if [ -n "$CONTAINER_ID" ]; then
                docker stop $CONTAINER_ID
                docker rm $CONTAINER_ID
              else
                echo "No container found matching the criteria."
              fi
              if [ -n "$OLD_IMAGE_ID" ]; then
                docker rmi -f $OLD_IMAGE_ID
              else
                echo "No old image found matching the criteria."
              fi
    
              # Pull Docker image using Minikube
              docker pull pavelkostyuk/portfolio:latest
    
              # Start pod
              kubectl run my-django-app --image=pavelkostyuk/portfolio:latest --port=8000
            '
                  